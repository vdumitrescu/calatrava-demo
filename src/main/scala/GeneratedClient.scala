/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.9.7 http://www.apidoc.me/gilt/calatrava/0.0.1-dev/play_2_x_json
 */
package com.gilt.calatrava.v0.models {

case class AwsSink(
                    kinesisStreamName: String,
                    kinesisEndpoint: String,
                    s3BucketName: String,
                    iamRoleArn: String
                    )

/**
 * The representation of a bridge for event changes. On source table change trigger
 * generates change events which are stored in log table and then published to
 * Kinesis.
 */
case class Bridge(
                   id: String,
                   databaseId: String,
                   source: com.gilt.calatrava.v0.models.Table,
                   trigger: com.gilt.calatrava.v0.models.Trigger,
                   log: com.gilt.calatrava.v0.models.Table,
                   sink: com.gilt.calatrava.v0.models.AwsSink,
                   status: com.gilt.calatrava.v0.models.Status
                   )

/**
 * All data required to activate event streaming on specific database table.
 */
case class BridgeForm(
                       databaseId: String,
                       source: com.gilt.calatrava.v0.models.Table,
                       log: com.gilt.calatrava.v0.models.Table,
                       sink: com.gilt.calatrava.v0.models.AwsSink
                       )

case class ChangeEvent(
                        id: String,
                        entityKey: _root_.scala.Option[String] = None,
                        beforeJson: _root_.scala.Option[String] = None,
                        afterJson: _root_.scala.Option[String] = None,
                        timestamp: _root_.org.joda.time.DateTime
                        )

case class Database(
                     id: String,
                     organizationId: String,
                     connectionString: String,
                     user: String,
                     password: String,
                     dbType: com.gilt.calatrava.v0.models.DbType
                     )

/**
 * The form used to create a new database.
 */
case class DatabaseForm(
                         organizationId: String,
                         connectionString: String,
                         user: String,
                         password: String,
                         dbType: com.gilt.calatrava.v0.models.DbType
                         )

case class Error(
                  code: String,
                  message: String
                  )

case class Healthcheck(
                        status: String
                        )

case class Organization(
                         id: String,
                         name: String
                         )

case class SinkEvent(
                      event: _root_.scala.Option[com.gilt.calatrava.v0.models.ChangeEvent] = None,
                      eventObjectKey: _root_.scala.Option[String] = None
                      )

case class Table(
                  schema: String,
                  name: String
                  )

case class Trigger(
                    enableCode: String,
                    disableCode: String
                    )

sealed trait DbType

object DbType {

  case object Postgres92 extends DbType { override def toString = "postgres92+" }

  /**
   * UNDEFINED captures values that are sent either in error or
   * that were added by the server after this library was
   * generated. We want to make it easy and obvious for users of
   * this library to handle this case gracefully.
   *
   * We use all CAPS for the variable name to avoid collisions
   * with the camel cased values above.
   */
  case class UNDEFINED(override val toString: String) extends DbType

  /**
   * all returns a list of all the valid, known values. We use
   * lower case to avoid collisions with the camel cased values
   * above.
   */
  val all = Seq(Postgres92)

  private[this]
  val byName = all.map(x => x.toString.toLowerCase -> x).toMap

  def apply(value: String): DbType = fromString(value).getOrElse(UNDEFINED(value))

  def fromString(value: String): _root_.scala.Option[DbType] = byName.get(value.toLowerCase)

}

sealed trait Status

object Status {

  case object Enabled extends Status { override def toString = "enabled" }
  case object Disabled extends Status { override def toString = "disabled" }

  /**
   * UNDEFINED captures values that are sent either in error or
   * that were added by the server after this library was
   * generated. We want to make it easy and obvious for users of
   * this library to handle this case gracefully.
   *
   * We use all CAPS for the variable name to avoid collisions
   * with the camel cased values above.
   */
  case class UNDEFINED(override val toString: String) extends Status

  /**
   * all returns a list of all the valid, known values. We use
   * lower case to avoid collisions with the camel cased values
   * above.
   */
  val all = Seq(Enabled, Disabled)

  private[this]
  val byName = all.map(x => x.toString.toLowerCase -> x).toMap

  def apply(value: String): Status = fromString(value).getOrElse(UNDEFINED(value))

  def fromString(value: String): _root_.scala.Option[Status] = byName.get(value.toLowerCase)

}

}

package com.gilt.calatrava.v0.models {

package object json {
  import play.api.libs.functional.syntax._
  import play.api.libs.json.{JsString, Writes, __}

  private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

  private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
    def writes(x: java.util.UUID) = JsString(x.toString)
  }

  private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
    import org.joda.time.format.ISODateTimeFormat.dateTimeParser
    dateTimeParser.parseDateTime(str)
  }

  private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
    def writes(x: org.joda.time.DateTime) = {
      import org.joda.time.format.ISODateTimeFormat.dateTime
      val str = dateTime.print(x)
      JsString(str)
    }
  }

  implicit val jsonReadsCalatravaDbType = __.read[String].map(DbType.apply)
  implicit val jsonWritesCalatravaDbType = new Writes[DbType] {
    def writes(x: DbType) = JsString(x.toString)
  }

  implicit val jsonReadsCalatravaStatus = __.read[String].map(Status.apply)
  implicit val jsonWritesCalatravaStatus = new Writes[Status] {
    def writes(x: Status) = JsString(x.toString)
  }

  implicit def jsonReadsCalatravaAwsSink: play.api.libs.json.Reads[AwsSink] = {
    (
      (__ \ "kinesis_stream_name").read[String] and
        (__ \ "kinesis_endpoint").read[String] and
        (__ \ "s3_bucket_name").read[String] and
        (__ \ "iam_role_arn").read[String]
      )(AwsSink.apply _)
  }

  implicit def jsonWritesCalatravaAwsSink: play.api.libs.json.Writes[AwsSink] = {
    (
      (__ \ "kinesis_stream_name").write[String] and
        (__ \ "kinesis_endpoint").write[String] and
        (__ \ "s3_bucket_name").write[String] and
        (__ \ "iam_role_arn").write[String]
      )(unlift(AwsSink.unapply _))
  }

  implicit def jsonReadsCalatravaBridge: play.api.libs.json.Reads[Bridge] = {
    (
      (__ \ "id").read[String] and
        (__ \ "database_id").read[String] and
        (__ \ "source").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "trigger").read[com.gilt.calatrava.v0.models.Trigger] and
        (__ \ "log").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").read[com.gilt.calatrava.v0.models.AwsSink] and
        (__ \ "status").read[com.gilt.calatrava.v0.models.Status]
      )(Bridge.apply _)
  }

  implicit def jsonWritesCalatravaBridge: play.api.libs.json.Writes[Bridge] = {
    (
      (__ \ "id").write[String] and
        (__ \ "database_id").write[String] and
        (__ \ "source").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "trigger").write[com.gilt.calatrava.v0.models.Trigger] and
        (__ \ "log").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").write[com.gilt.calatrava.v0.models.AwsSink] and
        (__ \ "status").write[com.gilt.calatrava.v0.models.Status]
      )(unlift(Bridge.unapply _))
  }

  implicit def jsonReadsCalatravaBridgeForm: play.api.libs.json.Reads[BridgeForm] = {
    (
      (__ \ "database_id").read[String] and
        (__ \ "source").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "log").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").read[com.gilt.calatrava.v0.models.AwsSink]
      )(BridgeForm.apply _)
  }

  implicit def jsonWritesCalatravaBridgeForm: play.api.libs.json.Writes[BridgeForm] = {
    (
      (__ \ "database_id").write[String] and
        (__ \ "source").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "log").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").write[com.gilt.calatrava.v0.models.AwsSink]
      )(unlift(BridgeForm.unapply _))
  }

  implicit def jsonReadsCalatravaChangeEvent: play.api.libs.json.Reads[ChangeEvent] = {
    (
      (__ \ "id").read[String] and
        (__ \ "entity_key").readNullable[String] and
        (__ \ "before_json").readNullable[String] and
        (__ \ "after_json").readNullable[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
      )(ChangeEvent.apply _)
  }

  implicit def jsonWritesCalatravaChangeEvent: play.api.libs.json.Writes[ChangeEvent] = {
    (
      (__ \ "id").write[String] and
        (__ \ "entity_key").writeNullable[String] and
        (__ \ "before_json").writeNullable[String] and
        (__ \ "after_json").writeNullable[String] and
        (__ \ "timestamp").write[_root_.org.joda.time.DateTime]
      )(unlift(ChangeEvent.unapply _))
  }

  implicit def jsonReadsCalatravaDatabase: play.api.libs.json.Reads[Database] = {
    (
      (__ \ "id").read[String] and
        (__ \ "organization_id").read[String] and
        (__ \ "connection_string").read[String] and
        (__ \ "user").read[String] and
        (__ \ "password").read[String] and
        (__ \ "db_type").read[com.gilt.calatrava.v0.models.DbType]
      )(Database.apply _)
  }

  implicit def jsonWritesCalatravaDatabase: play.api.libs.json.Writes[Database] = {
    (
      (__ \ "id").write[String] and
        (__ \ "organization_id").write[String] and
        (__ \ "connection_string").write[String] and
        (__ \ "user").write[String] and
        (__ \ "password").write[String] and
        (__ \ "db_type").write[com.gilt.calatrava.v0.models.DbType]
      )(unlift(Database.unapply _))
  }

  implicit def jsonReadsCalatravaDatabaseForm: play.api.libs.json.Reads[DatabaseForm] = {
    (
      (__ \ "organization_id").read[String] and
        (__ \ "connection_string").read[String] and
        (__ \ "user").read[String] and
        (__ \ "password").read[String] and
        (__ \ "db_type").read[com.gilt.calatrava.v0.models.DbType]
      )(DatabaseForm.apply _)
  }

  implicit def jsonWritesCalatravaDatabaseForm: play.api.libs.json.Writes[DatabaseForm] = {
    (
      (__ \ "organization_id").write[String] and
        (__ \ "connection_string").write[String] and
        (__ \ "user").write[String] and
        (__ \ "password").write[String] and
        (__ \ "db_type").write[com.gilt.calatrava.v0.models.DbType]
      )(unlift(DatabaseForm.unapply _))
  }

  implicit def jsonReadsCalatravaError: play.api.libs.json.Reads[Error] = {
    (
      (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
  }

  implicit def jsonWritesCalatravaError: play.api.libs.json.Writes[Error] = {
    (
      (__ \ "code").write[String] and
        (__ \ "message").write[String]
      )(unlift(Error.unapply _))
  }

  implicit def jsonReadsCalatravaHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
    (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
  }

  implicit def jsonWritesCalatravaHealthcheck: play.api.libs.json.Writes[Healthcheck] = new play.api.libs.json.Writes[Healthcheck] {
    def writes(x: Healthcheck) = play.api.libs.json.Json.obj(
      "status" -> play.api.libs.json.Json.toJson(x.status)
    )
  }

  implicit def jsonReadsCalatravaOrganization: play.api.libs.json.Reads[Organization] = {
    (
      (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(Organization.apply _)
  }

  implicit def jsonWritesCalatravaOrganization: play.api.libs.json.Writes[Organization] = {
    (
      (__ \ "id").write[String] and
        (__ \ "name").write[String]
      )(unlift(Organization.unapply _))
  }

  implicit def jsonReadsCalatravaSinkEvent: play.api.libs.json.Reads[SinkEvent] = {
    (
      (__ \ "event").readNullable[com.gilt.calatrava.v0.models.ChangeEvent] and
        (__ \ "event_object_key").readNullable[String]
      )(SinkEvent.apply _)
  }

  implicit def jsonWritesCalatravaSinkEvent: play.api.libs.json.Writes[SinkEvent] = {
    (
      (__ \ "event").writeNullable[com.gilt.calatrava.v0.models.ChangeEvent] and
        (__ \ "event_object_key").writeNullable[String]
      )(unlift(SinkEvent.unapply _))
  }

  implicit def jsonReadsCalatravaTable: play.api.libs.json.Reads[Table] = {
    (
      (__ \ "schema").read[String] and
        (__ \ "name").read[String]
      )(Table.apply _)
  }

  implicit def jsonWritesCalatravaTable: play.api.libs.json.Writes[Table] = {
    (
      (__ \ "schema").write[String] and
        (__ \ "name").write[String]
      )(unlift(Table.unapply _))
  }

  implicit def jsonReadsCalatravaTrigger: play.api.libs.json.Reads[Trigger] = {
    (
      (__ \ "enable_code").read[String] and
        (__ \ "disable_code").read[String]
      )(Trigger.apply _)
  }

  implicit def jsonWritesCalatravaTrigger: play.api.libs.json.Writes[Trigger] = {
    (
      (__ \ "enable_code").write[String] and
        (__ \ "disable_code").write[String]
      )(unlift(Trigger.unapply _))
  }
}
}
